@startuml
'https: //plantuml.com/class-diagram

abstract class AbstractFlyingObject {
    - Vec2 position
    - Vec2 size
    # double width
    # double height
    # BufferedImage image
    # BasicCallback onVanish
    - Scale rotation

    + AbstractFlyingObject(Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2, Scale)
    + draw(Graphics): void
    + forward(): void
    + setPosition(double, double)
    + crash(AbstractFlyingObject): boolean
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedY(): int
    + getImage(): BufferedImage
    + getWidth(): int
    + getHeight(): int
    + notValid(): boolean
    + vanish(): void
    + getPosition(): Vec2
    + getRotation(): Scale
    + updateRotation(): Scale
    + getOnVanish(): BasicCallback
    + getSize(): Vec2
}

abstract class AbstractAircraft extends AbstractFlyingObject {
	# int
    + AbstractAircraft(Vec2, AnimateContainer, int, int)
    + decreaseHp(int): void
    + getHp(): int
    + getScore(): int
    # drawHp(): void
    + {abstract} shoot(): LinkedList<BaseBullet>
    + {abstract} dropProps(): LinkedList<AbstractProp>
 }

abstract class BaseBullet extends AbstractFlyingObject {
    - int power
    + BaseBullet(Vec2, AnimateContainer, int)
	+ getPower(): int
}

class HeroAircraft extends AbstractAircraft {
    - int shootNum
    - AircraftHeroBox box
    + HeroAircraft(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class MobEnemy extends AbstractAircraft {
    + MobEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class EliteEnemy extends AbstractAircraft {
    + EliteEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class BossEnemy extends AbstractAircraft {
    + BossEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class HeroBullet extends BaseBullet {
    + HeroBullet(Vec2, AnimateContainer, int power)
}

class EnemyBullet extends BaseBullet {
    + EnemyBullet(Vec2, AnimateContainer, int power)
}

abstract class AbstractProp extends AbstractFlyingObject {
    + AbstractProp(Vec2, AnimateContainer)
    + {abstract} handleAircrafts(List<AbstractAircraft>): void
}

class BloodProp extends AbstractProp {
    # int increaseHp
    + BloodProp(Vec2, AnimateContainer, int increaseHp)
    + handleAircrafts(List<AbstractAircraft>): void
}

class BombProp extends AbstractProp {
    + BombProp(Vec2, AnimateContainer)
    + handleAircrafts(List<AbstractAircraft>): void
}

class BulletProp extends AbstractProp {
    + BulletProp(Vec2, AnimateContainer)
    + handleAircrafts(List<AbstractAircraft>): void
}

interface AbstractAircraftFactory {
    + {abstract} create(): AbstractAircraft
}

class HeroAircraftFactory implements AbstractAircraftFactory {
    - {static} HeroAircraft heroInstance
    + HeroAircraftFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): HeroAircraft
    + {static} clearInstance(): void
    + create(): HeroAircraft
}
HeroAircraftFactory ..> HeroAircraft

class BossEnemyFactory implements AbstractAircraftFactory {
    - {static} BossEnemy instance
    + BossEnemyFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): BossEnemy
    + {static} clearInstance(): void
    + create(): BossEnemy
}
BossEnemyFactory ..> BossEnemy

class EliteEnemyFactory implements AbstractAircraftFactory {
    + EliteEnemyFactory(Vec2, AnimateContainer, int)
    + create(): EliteEnemy
}
EliteEnemyFactory ..> EliteEnemy

class MobEnemyFactory implements AbstractAircraftFactory {
    + MobEnemyFactory(Vec2, AnimateContainer, int)
    + create(): MobEnemy
}
MobEnemyFactory ..> MobEnemy

interface BaseBulletFactory {
    # Vec2 position
    + BaseBullet(Vec2)
    + {abstract} create(): BaseBullet
    + getPosition(): Vec2
}

class EnemyBulletFactory implements BaseBulletFactory {
    + enum BulletType
    + EnemyBulletFactory(Vec2, BulletType)
    + create(): BaseBullet
}
EnemyBulletFactory ..> EnemyBullet

class HeroBulletFactory implements BaseBulletFactory {
    + HeroBulletFactory(Vec2)
    + create(): BaseBullet
}
HeroBulletFactory ..> HeroBullet

interface AbstractPropFactory {
    # Vec2 position
    + {abstract} create(): AbstractProp
    # getPosition(): Vec2
    # getAnimateContainer(): AnimateContainer
}

class BloodPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BloodProp
}
BloodPropFactory ..> BloodProp

class BombPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BombProp
}
BombPropFactory ..> BombProp

class BulletPropFactory implements AbstractPropFactory {
    + BulletPropFactory(Vec2)
    + create(): BulletProp
}
BulletPropFactory ..> BulletProp

@enduml