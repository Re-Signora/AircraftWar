@startuml
'https: //plantuml.com/class-diagram

abstract class AbstractFlyingObject {
    - Vec2 position
    - Vec2 size
    # double width
    # double height
    # BufferedImage image
    # BasicCallback onVanish
    - Scale rotation

    + AbstractFlyingObject(Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2, Scale)
    + draw(Graphics): void
    + forward(): void
    + setPosition(double, double)
    + crash(AbstractFlyingObject): boolean
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedY(): int
    + getImage(): BufferedImage
    + getWidth(): int
    + getHeight(): int
    + notValid(): boolean
    + vanish(): void
    + getPosition(): Vec2
    + getRotation(): Scale
    + updateRotation(): Scale
    + getOnVanish(): BasicCallback
    + getSize(): Vec2
}

abstract class AbstractAircraft extends AbstractFlyingObject {
	# int
    + AbstractAircraft(Vec2, AnimateContainer, int, int)
    + decreaseHp(int): void
    + getHp(): int
    + getScore(): int
    # drawHp(): void
    + {abstract} shoot(): LinkedList<BaseBullet>
    + {abstract} dropProps(): LinkedList<AbstractProp>
 }

abstract class BaseBullet extends AbstractFlyingObject {
    - int power
    + BaseBullet(Vec2, AnimateContainer, int)
	+ getPower(): int
}

class HeroAircraft extends AbstractAircraft {
    - int shootNum
    - AircraftHeroBox box
    + HeroAircraft(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class MobEnemy extends AbstractAircraft {
    + MobEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class EliteEnemy extends AbstractAircraft {
    + EliteEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class BossEnemy extends AbstractAircraft {
    + BossEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class HeroBullet extends BaseBullet {
    + HeroBullet(Vec2, AnimateContainer, int power)
}

class EnemyBullet extends BaseBullet {
    + EnemyBullet(Vec2, AnimateContainer, int power)
}

interface PropApplier {
    + update(): AbstractProp
}

abstract class AbstractProp extends AbstractFlyingObject implements PropApplier {
    # List<AbstractAircraft> enemyAircrafts
    # List<BaseBullet> enemyBullets
    + AbstractProp(Vec2, AnimateContainer)
    + playSupplyMusic(): void
    + subscribeEnemyAircrafts(List<AbstractAircraft>): AbstractProp
    + subscribeEnemyBullets(List<BaseBullet>): AbstractProp
}

class BloodProp extends AbstractProp implements PropApplier {
    # int increaseHp
    + BloodProp(Vec2, AnimateContainer, int increaseHp)
    + update(): AbstractProp
}

class BombProp extends AbstractProp implements PropApplier {
    + BombProp(Vec2, AnimateContainer)
    + update(): AbstractProp
}

class BulletProp extends AbstractProp implements PropApplier {
    + BulletProp(Vec2, AnimateContainer)
    + handleAircrafts(List<AbstractAircraft>): void
}

interface AbstractAircraftFactory {
    + {abstract} create(): AbstractAircraft
}

class HeroAircraftFactory implements AbstractAircraftFactory {
    - {static} HeroAircraft heroInstance
    + HeroAircraftFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): HeroAircraft
    + {static} clearInstance(): void
    + create(): HeroAircraft
}
HeroAircraftFactory ..> HeroAircraft

class BossEnemyFactory implements AbstractAircraftFactory {
    - {static} BossEnemy instance
    + BossEnemyFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): BossEnemy
    + {static} clearInstance(): void
    + create(): BossEnemy
}
BossEnemyFactory ..> BossEnemy

class EliteEnemyFactory implements AbstractAircraftFactory {
    + EliteEnemyFactory(Vec2, AnimateContainer, int)
    + create(): EliteEnemy
}
EliteEnemyFactory ..> EliteEnemy

class MobEnemyFactory implements AbstractAircraftFactory {
    + MobEnemyFactory(Vec2, AnimateContainer, int)
    + create(): MobEnemy
}
MobEnemyFactory ..> MobEnemy

interface BaseBulletFactory {
    # Vec2 position
    + BaseBullet(Vec2)
    + {abstract} create(): BaseBullet
    + getPosition(): Vec2
}

class EnemyBulletFactory implements BaseBulletFactory {
    + enum BulletType
    + EnemyBulletFactory(Vec2, BulletType)
    + create(): BaseBullet
}
EnemyBulletFactory ..> EnemyBullet

class HeroBulletFactory implements BaseBulletFactory {
    + HeroBulletFactory(Vec2)
    + create(): BaseBullet
}
HeroBulletFactory ..> HeroBullet

interface AbstractPropFactory {
    # Vec2 position
    + {abstract} create(): AbstractProp
    # getPosition(): Vec2
    # getAnimateContainer(): AnimateContainer
}

class BloodPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BloodProp
}
BloodPropFactory ..> BloodProp

class BombPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BombProp
}
BombPropFactory ..> BombProp

class BulletPropFactory implements AbstractPropFactory {
    + BulletPropFactory(Vec2)
    + create(): BulletProp
}
BulletPropFactory ..> BulletProp

interface BasicCallback {
    + run(): void
}

class VectorType {
    - int size
    + VectorType()
    + VectorType(int, List<Double>)
    + get(): List<Double>
    + set(VectorType): void
    + set(List<Double>): void
    + getSize(): int
    + calc(VectorType, Operator): VectorType
    + enum Operator
    + plus(double): VectorType
    + minus(double): VectorType
    + times(double): VectorType
    + divide(double): VectorType
    + plus(VectorType): VectorType
    + minus(VectorType): VectorType
    + times(VectorType): VectorType
    + divide(VectorType): VectorType
    + equals(VectorType): Boolean
}

class VectorTypeFactory {
    + VectorTypeFactory()
    + {static} fromDouble(int, double): VectorType
}
VectorTypeFactory ..> VectorType

interface VectorFactory<T> {
    + fromVector(VectorType): T
    + copy(): T
    + getNewInstance(): T
}

class Vec extends VectorType implements VectorFactory {
    + Vec()
    + Vec(int, List<Double>)
    + copy(): Vec
    + fromVector(VectorType): Vec
    + getNewInstance(): Vec
    + toString(): String
    + plus(Vec): Vec
    + minus(Vec): Vec
    + times(Vec): Vec
    + divide(Vec): Vec
}

class Vec2 extends Vec {
    + Vec2()
    + Vec2(double, double)
    + fromVector(VectorType): Vec2
    + copy(): Vec2
    + set(double, double): void
    + plus(Vec2): Vec2
    + minus(Vec2): Vec2
    + times(Vec2): Vec2
    + divide(Vec2): Vec2
    + getX(): double
    + getY(): double
    + getNewInstance(): Vec2
}

class Scale extends Vec {
    + Scale()
    + Scale(double)
    + fromVector(VectorType): Scale
    + copy(): Scale
    + set(double, double): void
    + plus(Scale): Scale
    + minus(Scale): Scale
    + times(Scale): Scale
    + divide(Scale): Scale
    + getX(): double
    + getNewInstance(): Scale
}

interface TimerCallback extends BasicCallback

class Timer {
    - double duration
    - double time
    - TimerCallback callback
    + Timer(double, TimerCallback)
    + Timer(TimerLinearChange, TimerCallback)
    + execute(TimerController): void
    + update(double): void
}
Timer --> TimerCallback
Timer --> TimerLinearChange

class TimerController {
    - List<Timer> TIMERS
    + TimerController()
    + getTimers(): List<Timer>
    + done(): void
    + init(double): void
    + update(): void
    + add(Timer): void
    + getFps(): int
    + getTimeDelta(): double
}
TimerController --> Timer

enum AnimateVectorType

enum AnimateType

interface AnimateWithTarget<T> {
    + getVecTarget(): T
}

abstract class AbstractAnimate<T> {
    - AnimateType animateType
    - AnimateVectorType animateVectorType
    - T source
    + AbstractAnimate(T, AnimateType, AnimateVectorType, double, double)
    + update(double): Boolean
    + isDone(double): Boolean
    + getSpeed(double): T
    + getDelta(): T
    + getAnimateVectorType(): AnimateVectorType
    + getAnimateType(): AnimateType
    + getSource(): T
    # getNewVecInstance(): T
}
AbstractAnimate --> AnimateVectorType
AbstractAnimate --> AnimateType

class Linear<T> extends AbstractAnimate {
    - T speed
    - Boolean willStop
    + Linear(T, T, AnimateVectorType, double)
    + Linear(T, T, AnimateVectorType, double, double)
    + Linear(T, T, AnimateVectorType, double, double, Boolean)
    + update(double): Boolean
    + isDone(double): Boolean
    + getSpeed(): T
    + getDelta(): T
}

class LinearLoop<T> extends Linear {
    - Vec2 range
    + LinearLoop(T, T, AnimateVectorType, double, Vec2)
    + update(double): Boolean
    + isDone(double): Boolean
}

class LinearRebound<T> extends Linear {
    - Vec2 rangeLeft
    - Vec2 rangeRight
    + LinearRebound(T, T, double, Vec2, Vec2)
    + LinearRebound(T, T, double, Vec2, Vec2, double)
    + isDone(double): Boolean
    + update(double): Boolean
}

class Empty<T> extends AbstractAnimate {
    + Empty(T)
    + isDone(double): Boolean
    + update(double): Boolean
    + getDelta(): T
    + getSpeed(): T
}

class Delay<T> extends AbstractAnimate {
    + Delay(T, double)
    + isDone(double): Boolean
    + update(double): Boolean
    + getDelta(): T
    + getSpeed(): T
}

class LinearToTarget<T> extends Linear implements AnimateWithTarget {
    - T vecTarget
    - double speed
    - boolean willStop
    + LinearToTarget(T, T, double, double, boolean)
    + LinearToTarget(T, T, double, double)
    + getVecTarget(): T
    + updateSpeed(): void
    + getDelta(): T
    + isDone(): Boolean
    + update(): Boolean
}

class LinearTracking<T> extends LinearToTarget implements AnimateWithTarget {
    + LinearTracking(T, T, double, double)
    + update(): Boolean
}

class NonLinear<T> extends AbstractAnimate implements AnimateWithTarget {
    + NonLinear(T, T, AnimateVectorType, double, double, boolean)
    + NonLinear(T, T, AnimateVectorType, double, double)
    + isDone(): Boolean
    + update(): Boolean
    + getSpeed(): T
    + getDelta(): T
    + getVecTarget(): T
}

class SmoothTo<T> extends AbstractAnimate implements AnimateWithTarget {
    + SmoothTo(T, T, AnimateVectorType, double, double)
    + update(): Boolean
    + getSpeed(): T
    + getDelta(): T
    + getVecTarget(): T
}

interface AnimateCallback {
    + onFinish(AnimateContainer): boolean
}

class AnimateContainer {
    - List<AbstractAnimate<Vec>> animateList
    + AnimateContainer()
    + AnimateContainer(List<AbstractAnimate<Vec>>)
    # updateAllInner(double): List<Boolean>
    + updateAll(double): Boolean
    + getSpeed(double): Vec
    + getRotation(): Scale
    + getDelta(): Vec
    + getAnimateList(): ListL<AbstractAnimate<Vec>>
    + clearAllAnimate(): AnimateContainer
    + addAnimate(AbstractAnimate<Vec>): void
    + setAnimateCallback(AnimateCallback): void
    + clearAnimateCallback(): void
}
AnimateContainer --> AbstractAnimate
AnimateContainer ..> AnimateCallback

class AnimateContainerFactory {
    + enum ContainerType
    + AnimateContainerFactory(ContainerType, Vec2)
    + setupTimeSpan(double): AnimateContainerFactory
    + setupSpeed(Vec2): AnimateContainerFactory
    + setupRange(Vec2): AnimateContainerFactory
    + setupRange2(Vec2): AnimateContainerFactory
    + create(): AnimateContainer
}
AnimateContainerFactory ..> AnimateContainer

interface HistoryDAO {
    + load(): void
    + dump(): void
    + updateByTime(int, HistoryObject): Boolean
    + deleteByTime(): Boolean
    + getByName(String): HistoryObject
    + addOne(HistoryObject): void
    + getAll(): List<HistoryObject>
    + deleteAll(): void
}

class HistoryObject {
    - String name
    - int score
    - long time
    - String message
    + HistoryObject(String, int, long, String)
    + copy(long): HistoryObject
    + toString(): String
    + getTimeString(): String
    + getName(): String
    + getScore(): int
    + getTime(): long
    + getMessage(): String
}

class HistoryImpl implements HistoryDAO {
    - {static} String FILENAME
    - List<HistoryObject> data
    + HistoryImpl()
    + load(): void
    + dump(): void
    + updateByTime(int, HistoryObject): Boolean
    + deleteByTime(): Boolean
    + getByName(String): HistoryObject
    + addOne(HistoryObject): void
    + getAll(): List<HistoryObject>
    + deleteAll(): void
    + display(): void
    + {static} getInstance(): HistoryImpl
}
HistoryImpl --> HistoryObject

class HistoryObjectFactory {
    + HistoryObjectFactory(String, int, String)
    + create(): HistoryObject
}
HistoryObjectFactory ..> HistoryObject

class AircraftBox extends AbstractFlyingObject {
    + AircraftBox(Vec2, Vec2)
    + forward(): void
}

class AircraftHeroBox extends AircraftBox

abstract class AbstractSceneClient {
    - Object waitObject
    + {abstract} getPanel(): JPanel
    + getWaitObject(): Object
    + nextScene(Class<? extends AbstractSceneClient>): void
    + void startAction(): void
}

interface Runnable {
    + {abstract} run(): void
}

abstract class AbstractSceneRunnable implements Runnable {
    + getClient(): AbstractSceneClient
    + run(): void
}

class Scene {
    - AbstractSceneRunnable sceneRunnable
    - String name
    + Scene(String, AbstractSceneClient)
    + getName(): String
    + getSceneRunnable(): AbstractSceneRunnable
    + run(): void
}
Scene --> AbstractSceneRunnable
Scene ..> AbstractSceneClient

class SceneRun {
    - JFrame frame
    - LinkedList<Scene> sceneList
    - SceneRun instance
    - Scene nextScene
    - CardLayout cardLayout
    - JPanel wrapperPanel
    + {static} newInstance(JFrame, List<Scene>): SceneRun
    + {static} getInstance(): SceneRun
    # SceneRun(JFrame, List<Scene>)
    + run(): void
    + setNextScene(Scene): SceneRun
    + setNextScene(Class<? extends AbstractSceneClient>): SceneRun
}
SceneRun --> Scene

class GameWindow extends AbstractSceneClient {
    - {static} GameWindow gameWindow
    - {static} Game game
    + {static} getInstance(): GameWindow
    + getPanel(): JPanel
    + getGame(): Game
    + getWaitObject(): Object
    + nextScene(Class<? extends AbstractSceneClient>): void
    + clearGameInstance(): void
    + startAction(): void
}
GameWindow ..> RunningConfig

class HistoryWindow extends AbstractSceneClient {
    - {static} HistoryWindow historyWindow
    - JPanel mainPanel
    - JLabel difficultyLabel
    - JTable historyTable
    - JComboBox<String> selectDifficultyComboBox
    - Difficulty selectedDifficulty
    + HistoryWindow(boolean)
    + HistoryWindow()
    + syncWidthDao(): void
    + {static} getInstance(): HistoryWindow
    + getPanel(): JPanel
    + startAction(): void
}
HistoryWindow --> HistoryImpl

class MainWindow extends AbstractSceneClient {
    - {static} MainWindow mainWindow
    - JCheckBox musicOnCheckBox
    - JPanel mainPanel
    + {static} getInstance(): MainWindow
    + MainWindow()
    + getPanel(): JPanel
}
MainWindow ..> RunningConfig

class TimerLinearChange {
    - Scale initial
    - AbstractAnimate<Vec> animate
    + TimerLinearChange(Scale, Scale, Scale)
    + TimerLinearChange(double, double, Double)
    + TimerLinearChange(double, double)
    + TimerLinearChange(double)
    + getAnimate(): AbstractAnimate<Vec>
    + update(double): TimerLinearChange
    + getScaleNow(double): Scale
}

abstract class AbstractConfig {
    # TimerLinearChange mobCreate
    # TimerLinearChange eliteCreate
    # TimerLinearChange enemyShoot
    # TimerLinearChange bossShoot
    # TimerLinearChange heroShoot
    # TimerLinearChange bossScoreThreshold
    # TimerLinearChange dropPropsRate
    # TimerLinearChange enemyMagnification
    + getMobCreate(): TimerLinearChange
    + getEliteCreate(): TimerLinearChange
    + getEnemyShoot(): TimerLinearChange
    + getHeroShoot(): TimerLinearChange
    + getBossShoot(): TimerLinearChange
    + getBossScoreThreshold(): TimerLinearChange
    + getDropPropsRate(): TimerLinearChange
    + getEnemyMagnification(): TimerLinearChange
    + getHeroInitialHp(): int
    + toString(): String
    + printNow(): void
}

class EasyConfig extends AbstractConfig

class MediumConfig extends AbstractConfig {
    # TimerLinearChange mobCreate
    # TimerLinearChange eliteCreate
    # TimerLinearChange enemyShoot
    # TimerLinearChange bossShoot
    # TimerLinearChange dropPropsRate
    # TimerLinearChange enemyMagnification
    + getMobCreate(): TimerLinearChange
    + getEliteCreate(): TimerLinearChange
    + getEnemyShoot(): TimerLinearChange
    + getBossShoot(): TimerLinearChange
    + getDropPropsRate(): TimerLinearChange
    + getEnemyMagnification(): TimerLinearChange
    + getHeroInitialHp(): int
}

class HardConfig extends AbstractConfig {
    # TimerLinearChange mobCreate
    # TimerLinearChange eliteCreate
    # TimerLinearChange enemyShoot
    # TimerLinearChange bossShoot
    # TimerLinearChange dropPropsRate
    # TimerLinearChange enemyMagnification
    # TimerLinearChange bossScoreThreshold
    + getMobCreate(): TimerLinearChange
    + getEliteCreate(): TimerLinearChange
    + getEnemyShoot(): TimerLinearChange
    + getBossShoot(): TimerLinearChange
    + getDropPropsRate(): TimerLinearChange
    + getEnemyMagnification(): TimerLinearChange
    + getHeroInitialHp(): int
    + getBossScoreThreshold(): TimerLinearChange
}

class ConfigFactory {
    - Difficulty difficulty
    + ConfigFactory(Difficulty)
    + create(): AbstractConfig
}
ConfigFactory ..> EasyConfig
ConfigFactory ..> MediumConfig
ConfigFactory ..> HardConfig
ConfigFactory --> Difficulty

class Constants

class RunningConfig {
    + {static} Difficulty difficulty
    + {static} Boolean musicEnable
    + {static} Boolean autoShoot
}
RunningConfig --> Difficulty

enum Difficulty

@enduml