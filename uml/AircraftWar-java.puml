@startuml
'https: //plantuml.com/class-diagram

abstract class AbstractFlyingObject {
    - Vec2 position
    - Vec2 size
    # double width
    # double height
    # BufferedImage image
    # BasicCallback onVanish
    - Scale rotation

    + AbstractFlyingObject(Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2)
    + AbstractFlyingObject(Vec2, AnimateContainer, Vec2, Scale)
    + draw(): void
    + forward(): void
    + setPosition(double, double)
    + crash(AbstractFlyingObject): boolean
    + getLocationX(): int
    + getLocationY(): int
    + getSpeedY(): int
    + getImage(): BufferedImage
    + getWidth(): int
    + getHeight(): int
    + notValid(): boolean
    + vanish(): void
    + getPosition(): Vec2
    + getRotation(): Scale
    + getOnVanish(): BasicCallback
    + getSize(): Vec2
}

abstract class AbstractAircraft extends AbstractFlyingObject {
	# int
    + AbstractAircraft(Vec2, AnimateContainer, int, int)
    + decreaseHp(int): void
    + getHp(): int
    + getScore(): int
    + {abstract} shoot(): LinkedList<BaseBullet>
    + {abstract} dropProps(): LinkedList<AbstractProp>
 }

abstract class BaseBullet extends AbstractFlyingObject {
    - int power
    + BaseBullet(Vec2, AnimateContainer, int)
	+ getPower(): int
}

class HeroAircraft extends AbstractAircraft {
    - int shootNum
    + HeroAircraft(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class MobEnemy extends AbstractAircraft {
    + MobEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class EliteEnemy extends AbstractAircraft {
    + EliteEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class BossEnemy extends AbstractAircraft {
    + BossEnemy(Vec2, AnimateContainer, int)
    + forward(): void
    + shoot(): LinkedList<BaseBullet>
    + dropProps(): LinkedList<AbstractProp>
}

class HeroBullet extends BaseBullet {
    + HeroBullet(Vec2, AnimateContainer, int power)
}

class EnemyBullet extends BaseBullet {
    + EnemyBullet(Vec2, AnimateContainer, int power)
}

abstract class AbstractProp extends AbstractFlyingObject {
    + AbstractProp(Vec2, AnimateContainer)
    + {abstract} handleAircrafts(List<AbstractAircraft>): void
}

class BloodProp extends AbstractProp {
    # int increaseHp
    + BloodProp(Vec2, AnimateContainer, int increaseHp)
    + handleAircrafts(List<AbstractAircraft>): void
}

class BombProp extends AbstractProp {
    + BombProp(Vec2, AnimateContainer)
    + handleAircrafts(List<AbstractAircraft>): void
}

class BulletProp extends AbstractProp {
    + BulletProp(Vec2, AnimateContainer)
    + handleAircrafts(List<AbstractAircraft>): void
}

interface AbstractAircraftFactory {
    + {abstract} create(): AbstractAircraft
}

class HeroAircraftFactory implements AbstractAircraftFactory {
    - {static} HeroAircraft heroInstance
    + HeroAircraftFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): HeroAircraft
    + {static} clearInstance(): void
    + create(): HeroAircraft
}
HeroAircraftFactory ..> HeroAircraft

class BossEnemyFactory implements AbstractAircraftFactory {
    - {static} BossEnemy instance
    + BossEnemyFactory(Vec2, AnimateContainer, int)
    + {static} getInstance(): BossEnemy
    + {static} clearInstance(): void
    + create(): BossEnemy
}
BossEnemyFactory ..> BossEnemy

class EliteEnemyFactory implements AbstractAircraftFactory {
    + EliteEnemyFactory(Vec2, AnimateContainer, int)
    + create(): EliteEnemy
}
EliteEnemyFactory ..> EliteEnemy

class MobEnemyFactory implements AbstractAircraftFactory {
    + MobEnemyFactory(Vec2, AnimateContainer, int)
    + create(): MobEnemy
}
MobEnemyFactory ..> MobEnemy

interface BaseBulletFactory {
    # Vec2 position
    + BaseBullet(Vec2)
    + {abstract} create(): BaseBullet
    + getPosition(): Vec2
}

class EnemyBulletFactory implements BaseBulletFactory {
    + enum BulletType
    + EnemyBulletFactory(Vec2, BulletType)
    + create(): BaseBullet
}
EnemyBulletFactory ..> EnemyBullet

class HeroBulletFactory implements BaseBulletFactory {
    + HeroBulletFactory(Vec2)
    + create(): BaseBullet
}
HeroBulletFactory ..> HeroBullet

interface AbstractPropFactory {
    # Vec2 position
    + {abstract} create(): AbstractProp
    # getPosition(): Vec2
    # getAnimateContainer(): AnimateContainer
}

class BloodPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BloodProp
}
BloodPropFactory ..> BloodProp

class BombPropFactory implements AbstractPropFactory {
    + BloodPropFactory(Vec2)
    + create(): BombProp
}
BombPropFactory ..> BombProp

class BulletPropFactory implements AbstractPropFactory {
    + BulletPropFactory(Vec2)
    + create(): BulletProp
}
BulletPropFactory ..> BulletProp

interface BasicCallback {
    + run(): void
}

class VectorType {
    - int size
    + VectorType()
    + VectorType(int, List<Double>)
    + get(): List<Double>
    + set(VectorType): void
    + set(List<Double>): void
    + getSize(): int
    + calc(VectorType, Operator): VectorType
    + enum Operator
    + plus(double): VectorType
    + minus(double): VectorType
    + times(double): VectorType
    + divide(double): VectorType
    + plus(VectorType): VectorType
    + minus(VectorType): VectorType
    + times(VectorType): VectorType
    + divide(VectorType): VectorType
    + equals(VectorType): Boolean
}

class VectorTypeFactory {
    + VectorTypeFactory()
    + {static} fromDouble(int, double): VectorType
}
VectorTypeFactory ..> VectorType

interface VectorFactory<T> {
    + fromVector(VectorType): T
    + copy(): T
    + getNewInstance(): T
}

class Vec extends VectorType implements VectorFactory {
    + Vec()
    + Vec(int, List<Double>)
    + copy(): Vec
    + fromVector(VectorType): Vec
    + getNewInstance(): Vec
    + toString(): String
    + plus(Vec): Vec
    + minus(Vec): Vec
    + times(Vec): Vec
    + divide(Vec): Vec
}

class Vec2 extends Vec {
    + Vec2()
    + Vec2(double, double)
    + fromVector(VectorType): Vec2
    + copy(): Vec2
    + set(double, double): void
    + plus(Vec2): Vec2
    + minus(Vec2): Vec2
    + times(Vec2): Vec2
    + divide(Vec2): Vec2
    + getX(): double
    + getY(): double
    + getNewInstance(): Vec2
}

class Scale extends Vec {
    + Scale()
    + Scale(double)
    + fromVector(VectorType): Scale
    + copy(): Scale
    + set(double, double): void
    + plus(Scale): Scale
    + minus(Scale): Scale
    + times(Scale): Scale
    + divide(Scale): Scale
    + getX(): double
    + getNewInstance(): Scale
}

interface TimerCallback extends BasicCallback

class Timer {
    - double duration
    - double time
    - TimerCallback callback
    + Timer(double, TimerCallback)
    + execute(): void
}

class TimerController {
    - {static} List<Timer> TIMERS
    + TimerController()
    + getTimers(): List<Timer>
    + {static} done(): void
    + {static} init(double): void
    + {static} update(): void
    + {static} add(Timer): void
    + {static} getFps(): int
    + {static} getTimeDelta(): double
}
Timer ..+ TimerController

@enduml