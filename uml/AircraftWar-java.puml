@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject {
    # int locationX
    # int locationY
    # int speedX
    # int speedY
    # BufferedImage image
    # int width
    # int height
    # boolean isValid

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft {
	# int maxHp
    # int hp
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
 }

abstract class AbstractBullet {
    - int power
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractBullet

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy

AbstractBullet <|-- HeroBullet
AbstractBullet <|-- EnemyBullet

class HeroAircraft {
    - int shootNum
    - int power
    - int direction
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<Bullet>
}
AbstractAircraft <|-- EliteEnemy

class HeroBullet {
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

abstract class AbstractProp {
    - int power
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
	+ {abstract} handleAircrafts(List<AbstractAircraft> enemyAircrafts):void
}
AbstractFlyingObject <|-- AbstractProp

class BloodProp {
    # int increaseHp
    + BloodProp(int locationX, int locationY, int speedX, int speedY, int increaseHp)
    + handleAircrafts(List<AbstractAircraft> enemyAircrafts):void
}
AbstractProp <|-- BloodProp

class BombProp {
    + BombProp(int locationX, int locationY, int speedX, int speedY)
    + handleAircrafts(List<AbstractAircraft> enemyAircrafts):void
}
AbstractProp <|-- BombProp

class BulletProp {
    + BulletProp(int locationX, int locationY, int speedX, int speedY)
    + handleAircrafts(List<AbstractAircraft> enemyAircrafts):void
}
AbstractProp <|-- BulletProp

@enduml